// Generated by LiveScript 1.2.0
var spawn, path, execFile, execute, Info, normalize, slice$ = [].slice;
spawn = require('child_process').spawn;
path = require('path');
execFile = path.resolve(__dirname, "..", "vendor/" + process.platform + "/" + process.arch + "/mystem");
execute = function(){
  var ref$, callback, i$, args, text, opt, defaults, mystem, chunks;
  ref$ = [].slice.call(arguments).reverse(), callback = ref$[0], args = 1 < (i$ = ref$.length - 1) ? slice$.call(ref$, 1, i$) : (i$ = 1, []), text = ref$[i$];
  if (!Array.isArray(text)) {
    text = [text];
  }
  opt = import$(import$({}, defaults), args.pop());
  defaults = {
    args: ['-', '-', '-n', '-l', '-e', 'utf-8'],
    execFile: execFile,
    encode: 'utf-8'
  };
  opt = import$(import$({}, defaults), opt);
  mystem = spawn(opt.execFile, opt.args);
  mystem.stderr.setEncoding(opt.encode);
  mystem.stderr.on('data', function(d){
    callback(d.toString());
    return mystem.kill('SIGHUP');
  });
  chunks = "";
  mystem.stdout.setEncoding(opt.encode);
  mystem.stdout.on('data', function(d){
    return chunks += d;
  });
  mystem.stdout.on('end', function(d){
    callback(null, chunks.toString(opt.encode).split(/\n/g));
    return mystem.kill('SIGHUP');
  });
  mystem.stdin.setEncoding(opt.encode);
  mystem.stdin.end(text.join(' '));
};
Info = (function(){
  Info.displayName = 'Info';
  var prototype = Info.prototype, constructor = Info;
  prototype.hypothesis = false;
  prototype.target = null;
  prototype.toString = function(){
    return this.target;
  };
  function Info(raw, args){
    var self;
    this.raw = raw;
    this.args = args != null
      ? args
      : {};
    self = this;
    this.target = this.raw;
    if (!!this.raw.match(/\?/g)) {
      self.hypothesis = true;
      self.target = self.target.replace(/\?/g, '');
    }
    if (!!this.raw.match(/\|/g)) {
      self.hypothesis = true;
      self.target = self.target.split(/\|/g)[0];
    }
    this;
  }
  return Info;
}());
module.exports = normalize = function(text, cb){
  return execute(text, function(err, data){
    var i;
    return cb(err, (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = data).length; i$ < len$; ++i$) {
        i = ref$[i$];
        if (!!i) {
          results$.push(new Info(i));
        }
      }
      return results$;
    }()));
  });
};
if (module.parent == null) {
  normalize(process.argv[2] != null ? process.argv.slice(2) : 'В мурелки шлепают пельсиски.\nВ стакелках светится мычай.', function(err, data){
    var i$, len$, i, results$ = [];
    for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
      i = data[i$];
      results$.push(console.log(i.toString()));
    }
    return results$;
  });
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}